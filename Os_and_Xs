### line 1 - defining the board ###

from IPython.display import clear_output
def display_board(board):
    clear_output()
    
    print(' Game board      Index position')
    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3] + '         1 | 2 | 3 ')
    print('-----------')
    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6] + '         4 | 5 | 6 ')
    print('-----------')
    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9] + '         7 | 8 | 9 ')

### line 2 - assign players to O or X ###

def player_input():
    marker = ''
    while not (marker == 'X' or marker == 'O'):
        marker = input('Player 1: Do you want to be X or O? ').upper()
    if marker == 'X':
        return ('X', 'O')
    else:
        return ('O', 'X')

### line 3 - match player markers to board locaion ###

def place_marker(board, marker, position):
    board[position] = marker

### line 4 - define win conditions ###

def win_check(board,mark):
    
    return ((board[7] == mark and board[8] == mark and board[9] == mark) or 
    (board[4] == mark and board[5] == mark and board[6] == mark) or 
    (board[1] == mark and board[2] == mark and board[3] == mark) or 
    (board[7] == mark and board[4] == mark and board[1] == mark) or 
    (board[8] == mark and board[5] == mark and board[2] == mark) or 
    (board[9] == mark and board[6] == mark and board[3] == mark) or 
    (board[7] == mark and board[5] == mark and board[3] == mark) or 
    (board[9] == mark and board[5] == mark and board[1] == mark))

### line 5 - use random module to decide which player goes first ###

import random
def choose_first():
    if random.randint(0, 1) == 0:
        return 'Player 2'
    else:
        return 'Player 1'

### line 6 - chek for available spaces ###

def space_check(board, position):
    return board[position] == ' '

### line 7 - check if board is full ###

def full_board_check(board):
    for i in range(1,10):
        if space_check(board, i):
            return False
    return True

### line 8 - ask for player's move ###

def player_choice(board):
    position = 0
    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):
        position = int(input('Choose your next position: (1-9) '))
    return position

### line 9 - ask if player wants to play again ###

def replay():
    return input('Do you want to play again? Enter Yes or No: ').lower().startswith('y')

### line 10 - running the game ###

print('Welcome to Os and Xs!')
while True:
    # Reset the board
    theBoard = [' '] * 10
    player1_marker, player2_marker = player_input()
    turn = choose_first()
    print(turn + ' will go first.')
    
    play_game = input('Are you ready to play? Enter Yes or No.')
    
    if play_game.lower()[0] == 'y':
        game_on = True
    else:
        game_on = False

    while game_on:
        if turn == 'Player 1':
            # Player1's turn.
            
            display_board(theBoard)
            position = player_choice(theBoard)
            place_marker(theBoard, player1_marker, position)

            if win_check(theBoard, player1_marker):
                display_board(theBoard)
                print('Congratulations! You have won the game!')
                game_on = False
            else:
                if full_board_check(theBoard):
                    display_board(theBoard)
                    print('The game is a draw!')
                    break
                else:
                    turn = 'Player 2'

        else:
            # Player2's turn.
            
            display_board(theBoard)
            position = player_choice(theBoard)
            place_marker(theBoard, player2_marker, position)

            if win_check(theBoard, player2_marker):
                display_board(theBoard)
                print('Player 2 has won!')
                game_on = False
            else:
                if full_board_check(theBoard):
                    display_board(theBoard)
                    print('The game is a draw!')
                    break
                else:
                    turn = 'Player 1'

    if not replay():
        break
